<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BigFCat</title>
  
  <subtitle>你还有很多未完成的梦，还有什么理由停下脚步?</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-31T15:57:59.905Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>uprain</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python3 函数基础</title>
    <link href="http://yoursite.com/2018/05/31/def/"/>
    <id>http://yoursite.com/2018/05/31/def/</id>
    <published>2018-05-31T15:57:59.905Z</published>
    <updated>2018-05-31T15:57:59.905Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h1><p>函数便于代码的重复利用：例如判断多个数值是否大于5.</p><p>1、函数命名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(参数)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">return</span> 表达式</span><br></pre></td></tr></table></figure><p>函数名，命名规则：字母、数字和下划线组成，和变量名命名规则一致。return 后面可以返回任意表达式，但不能是赋值语句。</p><p>比如判断多个数值是否大于5。</p><p>2、 函数调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(参数)</span><br></pre></td></tr></table></figure><p>3、return:</p><p>注意return 和print的区别，return大部分是函数的返回值，返回值可以赋值给变量的，而print只是打印出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def fun1():</span><br><span class="line">    print(&apos;我是xxx&apos;) ##默认返回一个None</span><br><span class="line"></span><br><span class="line">result = fun1()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;这个数大于5'</span>.format(num)</span><br><span class="line">    <span class="keyword">elif</span> num == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;这个数等于5'</span>.format(num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;这个数小于5'</span>.format(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result1 = fun2(<span class="number">1</span>) <span class="comment">##函数调用</span></span><br><span class="line">print(result1)</span><br><span class="line"></span><br><span class="line">result2 = fun2(<span class="number">100</span>)</span><br><span class="line">print(result2)</span><br><span class="line"><span class="comment">##运行结果：</span></span><br><span class="line"><span class="number">1</span>这个数小于<span class="number">5</span></span><br><span class="line"><span class="number">100</span>这个数大于<span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h1><p>1、必备参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>在函数调用的时候必须要传入的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun3</span><span class="params">(num)</span>:</span></span><br><span class="line">print(<span class="string">'今天星期：'</span>,num)</span><br><span class="line">    </span><br><span class="line">fun3(<span class="string">'星期一'</span>) <span class="comment">##函数调用的时候必须传入的参数，不然就会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##执行结果：</span></span><br><span class="line">今天星期： 星期一</span><br></pre></td></tr></table></figure><p>​<br>2、默认参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x,y=None)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>在函数调用的时候可以手动传入参数，也可以不传入参数(会自动调用默认的参数)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun4</span><span class="params">(word=<span class="string">'111'</span>)</span>:</span></span><br><span class="line">print(word)</span><br><span class="line"></span><br><span class="line">fun4()</span><br><span class="line">fun4(word=<span class="string">'222'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##执行结果：</span></span><br><span class="line"><span class="number">111</span></span><br><span class="line"><span class="number">222</span></span><br></pre></td></tr></table></figure><p>3、不定长参数<br>def func(*args,**kwargs):<br>    pass</p><p>传入的参数个数是可变的，可以是1个、2个到任意个，也可以是0个。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun4</span><span class="params">(*args)</span>:</span></span><br><span class="line">print(args)</span><br><span class="line"></span><br><span class="line">fun4(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment">##执行结果：</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)<span class="comment">##返回一个元组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun5</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">print(kwargs)</span><br><span class="line"></span><br><span class="line">fun5(a=<span class="number">1</span>,b = <span class="number">2</span>,c = <span class="number">3</span>)<span class="comment">##或者fun5(**&#123;'a':1,'b':2,'c':3&#125;) </span></span><br><span class="line"><span class="comment">##执行结果：</span></span><br><span class="line">&#123;<span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'a'</span>: <span class="number">1</span>&#125;<span class="comment">##返回一个字典类型</span></span><br></pre></td></tr></table></figure><p>#常见内置函数</p><p>1、dir(__builtins__)看到python中所有的内置函数。<br>2、常见函数<br>    len 求长度<br>    min 求最小值<br>    max 球求最大值<br>    sorted 排序<br>    reversed  反向<br>    sum  求和</p><p>3、进制转换函数<br>    bin  转化为二进制<br>    oct     转化为八进制<br>    hex   转化为十六进制<br>    ord   字符ASCII码<br>    chr   ASCII码转字符</p><p>4、python中高级内置函数    </p><p>​    ①ennumerate 返回一个可以枚举的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">print(list(enumerate(a)))</span><br><span class="line"><span class="comment">#输出结果：[(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]</span></span><br><span class="line"></span><br><span class="line">b = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">54</span>,<span class="number">23</span>,<span class="number">12</span>,<span class="number">78</span>]</span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> enumerate(b):</span><br><span class="line"><span class="keyword">if</span> value == <span class="number">23</span>:</span><br><span class="line">print(<span class="string">'23的索引是： '</span>,index)</span><br><span class="line"><span class="comment">#输出结果：23的索引是：  3</span></span><br></pre></td></tr></table></figure><p>​    ②eval   1.取出字符串中的内容。2.将字符串str当成有效的表达式来求指并返回计算结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="string">'1+2'</span></span><br><span class="line">Out[<span class="number">1</span>]: <span class="string">'1+2'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: eval(<span class="string">'1+2'</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="number">3</span></span><br></pre></td></tr></table></figure><p>​    ③exec   执行字符串或complie方法编译过的字符串 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: exec(<span class="string">'a=2'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: a</span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">2</span></span><br></pre></td></tr></table></figure><p>​    ④filter    过滤器 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##列表为偶数的保留下来</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun6</span><span class="params">(num)</span>:</span></span><br><span class="line"><span class="keyword">return</span> num % <span class="number">2</span> ==<span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(list(filter(fun6,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])))</span><br><span class="line"><span class="comment">##输出结果：[2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure><p>​    ⑤map    对于参数iterable中的每个元素都应用fuction函数，并将结果作为列表返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun7</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">print(list(map(fun7, num)))</span><br><span class="line"></span><br><span class="line">print(num) <span class="comment">##map不改变原来的列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##输出结果：</span></span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>​    ⑥zip   将对象逐一配对 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">b = [<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>]</span><br><span class="line">print(list(zip(a,b)))</span><br><span class="line"><span class="comment">##输出结果:[(1, 9), (2, 8), (3, 7), (4, 6)]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;函数基础&quot;&gt;&lt;a href=&quot;#函数基础&quot; class=&quot;headerlink&quot; title=&quot;函数基础&quot;&gt;&lt;/a&gt;函数基础&lt;/h1&gt;&lt;p&gt;函数便于代码的重复利用：例如判断多个数值是否大于5.&lt;/p&gt;
&lt;p&gt;1、函数命名&lt;/p&gt;
&lt;fig
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>IO多路复用(epoll)</title>
    <link href="http://yoursite.com/2018/05/22/epoll/"/>
    <id>http://yoursite.com/2018/05/22/epoll/</id>
    <published>2018-05-22T09:08:49.165Z</published>
    <updated>2018-05-22T09:08:49.162Z</updated>
    
    <content type="html"><![CDATA[<p>实现效果：服务端接收所有客户端的请求，并接收数据，在原封不动的把数据返回给客户端。</p><p><img src="https://uprain.cn/img/number1.png" alt=""></p><p>服务端代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> selectors  <span class="comment">##使用epoll</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment">##实例化/生成一个选择器。 这个选择器会根据操作系统来决定用epoll还是selector(selec是windows的io多路复用)</span></span><br><span class="line">e_selector = selectors.DefaultSelector()  <span class="comment"># 默认是根据系统来选择。windows没有epoll，windows就会选择selector</span></span><br><span class="line"><span class="comment">##e_selector = selectors.EpollSelector() 或者使用这一行代码 代替上面一行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server = socket.socket()</span><br><span class="line">server.bind((<span class="string">''</span>, <span class="number">9999</span>))</span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c_recv</span><span class="params">(con)</span>:</span></span><br><span class="line">    data = con.recv(<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">        print(<span class="string">'接收到客户端的数据：'</span>, data.decode())</span><br><span class="line">        con.send(data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        con.close()</span><br><span class="line">        e_selector.unregister(con)  <span class="comment"># 取消注册事件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s_accept</span><span class="params">(server)</span>:</span>  <span class="comment">##形参server</span></span><br><span class="line">    con, addr = server.accept()</span><br><span class="line">    e_selector.register(con, selectors.EVENT_READ, c_recv)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册事件              对象，      可读事件，       回调函数</span></span><br><span class="line">e_selector.register(server, selectors.EVENT_READ, s_accept)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 事件循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    events = e_selector.select()</span><br><span class="line">    <span class="comment"># print(events)</span></span><br><span class="line">    <span class="keyword">for</span> key, mask <span class="keyword">in</span> events:</span><br><span class="line">        callback = key.data</span><br><span class="line">        callback(key.fileobj)  <span class="comment"># 本质是调用的s_accpet</span></span><br></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line">client = socket.socket()</span><br><span class="line">client.connect((&apos;127.0.0.1&apos;, 9999))</span><br><span class="line">while True:</span><br><span class="line">    msg = input(&apos;&gt;&gt;&apos;)</span><br><span class="line">    client.send(msg.encode(&apos;utf-8&apos;))</span><br><span class="line">    data = client.recv(1000)</span><br><span class="line">    if data:</span><br><span class="line">        print(&apos;接收到服务端的数据:&apos;, data.decode())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实现效果：服务端接收所有客户端的请求，并接收数据，在原封不动的把数据返回给客户端。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://uprain.cn/img/number1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;服务端代码：&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
</feed>
