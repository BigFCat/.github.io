<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BigFCat</title>
  
  <subtitle>你还有很多未完成的梦，还有什么理由停下脚步?</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-22T03:48:02.413Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>uprain</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IO多路复用(epool)</title>
    <link href="http://yoursite.com/2018/05/22/epoll/"/>
    <id>http://yoursite.com/2018/05/22/epoll/</id>
    <published>2018-05-22T03:48:02.415Z</published>
    <updated>2018-05-22T03:48:02.413Z</updated>
    
    <content type="html"><![CDATA[<p>实现效果：服务端接收所有客户端的请求，并接收数据，在原封不动的把数据返回给客户端。</p><p><img src="img/number1.png" alt=""></p><p>服务端代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import selectors  ##使用epoll</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">##实例化/生成一个选择器。 这个选择器会根据操作系统来决定用epoll还是selector(selec是windows的io多路复用)</span><br><span class="line">e_selector = selectors.DefaultSelector()  # 默认是根据系统来选择。windows没有epoll，windows就会选择selector</span><br><span class="line">##e_selector = selectors.EpollSelector() 或者使用这一行代码 代替上面一行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server = socket.socket()</span><br><span class="line">server.bind((&apos;&apos;, 9999))</span><br><span class="line">server.listen(5)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def c_recv(con):</span><br><span class="line">    data = con.recv(1000)</span><br><span class="line">    if data:</span><br><span class="line">        print(&apos;接收到客户端的数据：&apos;, data.decode())</span><br><span class="line">        con.send(data)</span><br><span class="line">    else:</span><br><span class="line">        con.close()</span><br><span class="line">        e_selector.unregister(con)  # 取消注册事件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def s_accept(server):  ##形参server</span><br><span class="line">    con, addr = server.accept()</span><br><span class="line">    e_selector.register(con, selectors.EVENT_READ, c_recv)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 注册事件              对象，      可读事件，       回调函数</span><br><span class="line">e_selector.register(server, selectors.EVENT_READ, s_accept)</span><br><span class="line"></span><br><span class="line"># 事件循环</span><br><span class="line">while True:</span><br><span class="line">    events = e_selector.select()</span><br><span class="line">    # print(events)</span><br><span class="line">    for key, mask in events:</span><br><span class="line">        callback = key.data</span><br><span class="line">        callback(key.fileobj)  # 本质是调用的s_accpet</span><br></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line"></span><br><span class="line">client = socket.socket()</span><br><span class="line">client.connect((&apos;127.0.0.1&apos;, 9999))</span><br><span class="line">while True:</span><br><span class="line">    msg = input(&apos;&gt;&gt;&apos;)</span><br><span class="line">    client.send(msg.encode(&apos;utf-8&apos;))</span><br><span class="line">    data = client.recv(1000)</span><br><span class="line">    if data:</span><br><span class="line">        print(&apos;接收到服务端的数据:&apos;, data.decode())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实现效果：服务端接收所有客户端的请求，并接收数据，在原封不动的把数据返回给客户端。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;img/number1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;服务端代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;ta
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
</feed>
