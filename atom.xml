<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BigFCat</title>
  
  <subtitle>你还有很多未完成的梦，还有什么理由停下脚步?</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-22T02:38:51.741Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>uprain</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IO多路复用(epool)</title>
    <link href="http://yoursite.com/2018/05/22/socket_epoll/"/>
    <id>http://yoursite.com/2018/05/22/socket_epoll/</id>
    <published>2018-05-22T02:38:51.741Z</published>
    <updated>2018-05-22T02:38:51.741Z</updated>
    
    <content type="html"><![CDATA[<p>实现效果：服务端接收所有客户端的请求，并接收数据，在原封不动的把数据返回给客户端。</p><p>服务端代码：<br>    import selectors  ##使用epoll<br>import socket</p><p>##实例化/生成一个选择器。 这个选择器会根据操作系统来决定用epoll还是selector(selec是windows的io多路复用)<br>e_selector = selectors.DefaultSelector()  # 默认是根据系统来选择。windows没有epoll，windows就会选择selector</p><p>##e_selector = selectors.EpollSelector() 或者使用这一行代码 代替上面一行</p><p>server = socket.socket()<br>server.bind((‘’, 9999))<br>server.listen(5)</p><p>def c_recv(con):<br>    data = con.recv(1000)<br>    if data:<br>        print(‘接收到客户端的数据：’, data.decode())<br>        con.send(data)<br>    else:<br>        con.close()<br>        e_selector.unregister(con)  # 取消注册事件</p><p>def s_accept(server):  ##形参server<br>    con, addr = server.accept()<br>    e_selector.register(con, selectors.EVENT_READ, c_recv)</p><h1 id="注册事件-对象，-可读事件，-回调函数"><a href="#注册事件-对象，-可读事件，-回调函数" class="headerlink" title="注册事件              对象，      可读事件，       回调函数"></a>注册事件              对象，      可读事件，       回调函数</h1><p>e_selector.register(server, selectors.EVENT_READ, s_accept)</p><h1 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h1><p>while True:<br>    events = e_selector.select()</p><pre><code># print(events)for key, mask in events:    callback = key.data    callback(key.fileobj)  # 本质是调用的s_accpet</code></pre><p>客户端代码：<br>    import socket</p><p>client = socket.socket()<br>client.connect((‘127.0.0.1’, 9999))<br>while True:<br>    msg = input(‘&gt;&gt;’)<br>    client.send(msg.encode(‘utf-8’))<br>    data = client.recv(1000)<br>    if data:<br>        print(‘接收到服务端的数据:’, data.decode())</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实现效果：服务端接收所有客户端的请求，并接收数据，在原封不动的把数据返回给客户端。&lt;/p&gt;
&lt;p&gt;服务端代码：&lt;br&gt;    import selectors  ##使用epoll&lt;br&gt;import socket&lt;/p&gt;
&lt;p&gt;##实例化/生成一个选择器。 这个选择器会根
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="http://yoursite.com/2018/05/21/note1/"/>
    <id>http://yoursite.com/2018/05/21/note1/</id>
    <published>2018-05-21T10:41:04.326Z</published>
    <updated>2018-05-21T10:41:04.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试网页"><a href="#测试网页" class="headerlink" title="测试网页"></a>测试网页</h1><h2 id="你好"><a href="#你好" class="headerlink" title="你好"></a>你好</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;测试网页&quot;&gt;&lt;a href=&quot;#测试网页&quot; class=&quot;headerlink&quot; title=&quot;测试网页&quot;&gt;&lt;/a&gt;测试网页&lt;/h1&gt;&lt;h2 id=&quot;你好&quot;&gt;&lt;a href=&quot;#你好&quot; class=&quot;headerlink&quot; title=&quot;你好&quot;&gt;&lt;/a&gt;你好&lt;/h
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/05/21/1%E6%88%91%E7%9A%84%E6%B5%8B%E8%AF%95%E7%BD%91%E9%A1%B5/"/>
    <id>http://yoursite.com/2018/05/21/1我的测试网页/</id>
    <published>2018-05-21T08:36:41.928Z</published>
    <updated>2018-05-21T08:36:41.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h2 id="123"><a href="#123" class="headerlink" title="123"></a>123</h2><h3 id="asdf"><a href="#asdf" class="headerlink" title="asdf"></a>asdf</h3><h3 id="sdf"><a href="#sdf" class="headerlink" title="sdf"></a>sdf</h3><table><thead><tr><th>id1</th><th>id2</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr><tr><td>3</td><td>4</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h1&gt;&lt;h2 id=&quot;123&quot;&gt;&lt;a href=&quot;#123&quot; class=&quot;headerlink&quot; title=&quot;123&quot;&gt;&lt;/a&gt;123&lt;/h2&gt;&lt;h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/05/19/hello-world/"/>
    <id>http://yoursite.com/2018/05/19/hello-world/</id>
    <published>2018-05-19T07:26:54.090Z</published>
    <updated>2018-05-19T07:26:54.090Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
